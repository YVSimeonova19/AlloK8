@using Microsoft.AspNetCore.Http
@model Dictionary<int, List<TaskVM>>

@{
    Layout = "_Layout";
}

<div class="content-wrapper">
    <h3 class="mb-4">[Project] Kanban Board</h3>

    <div class="row d-flex justify-content-between">
        @foreach (var column in new[] { "To Do", "Doing", "Done" })
        {
        var columnId = column == "To Do" ? 1 : column == "Doing" ? 2 : 3;
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">@column</h4>
                    <ul class="list-group task-list" id="column-@columnId" ondrop="drop(event)" ondragover="allowDrop(event)">
                        @if (Model.ContainsKey(columnId))
                        {
                        @foreach (var task in Model[columnId])
                        {
                        <li class="list-group-item draggable d-flex align-items-center" id="task-@task.Position" draggable="true" ondragstart="drag(event)">
                            @task.Title
                            <button class="btn btn-icon bg-transparent text-danger ml-auto" onclick='deleteTask(@task.Position, this)'>
                                <i class="remove ti-close"></i>
                            </button>
                        </li>
                        }
                        }
                    </ul>
                    @if (column == "To Do")
                    {
                    <div class="input-group mt-3">
                        <input type="text" id="newTaskTodo" class="form-control" placeholder="Add new task">
                        <button class="btn btn-icon bg-transparent text-primary" onclick="addTask('todo')">
                            <i class="icon-circle-plus"></i>
                        </button>
                    </div>
                    }
                </div>
            </div>
        </div>
        }
    </div>
</div>

<script>
    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    function drop(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("text");
        var taskId = data.split('-')[1];
        var columnId = ev.target.id.split('-')[1];
        var position = ev.target.children.length;

        ev.target.appendChild(document.getElementById(data));

        fetch('/kanban/move', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ id: taskId, columnId: columnId, position: position })
        }).then(response => {
            if (!response.ok) {
                console.error('Failed to move task');
            }
        });
    }

    function addTask(columnId) {
        let input = document.getElementById("newTask" + columnId.charAt(0).toUpperCase() + columnId.slice(1));
        let taskText = input.value.trim();
        if (taskText === "") return;

        fetch('/kanban/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ title: taskText, columnId: columnId === 'todo' ? 1 : columnId === 'doing' ? 2 : 3 })
        }).then(response => {
            if (response.ok) {
                let taskItem = document.createElement("li");
                taskItem.className = "list-group-item draggable d-flex align-items-center";
                taskItem.id = "task-" + Date.now();
                taskItem.draggable = true;
                taskItem.ondragstart = drag;
                taskItem.innerHTML = `${taskText} <button class="btn btn-icon bg-transparent text-danger ml-auto" onclick='deleteTask(this)'><i class="remove ti-close"></i></button>`;

                document.getElementById("column-" + (columnId === 'todo' ? 1 : columnId === 'doing' ? 2 : 3)).appendChild(taskItem);
                input.value = "";
            } else {
                console.error('Failed to add task');
            }
        });
    }

    function deleteTask(taskId, button) {
        fetch('/kanban/delete', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ id: taskId })
        }).then(response => {
            if (response.ok) {
                button.parentElement.remove();
            } else {
                console.error('Failed to delete task');
            }
        });
    }

    function removeTask(button) {
        button.parentElement.remove();
    }
</script>

<style>
    .task-list {
        min-height: 200px;
        border: 1px dashed #ccc;
        padding: 10px;
        background-color: #f8f9fa;
    }

    .draggable {
        cursor: grab;
        margin: 5px;
    }
</style>