@model KanbanVM

@{
    Layout = "_Layout";
}

<div class="content-wrapper">
    <div class="row d-flex justify-content-between align-items-center">
        <h3 class="mb-4 ml-3">@Model.ProjectName @T.KanbanBoardTitleText</h3>
        <button type="submit" class="btn btn-primary mr-3 mb-4">@T.SortByPriorityButtonText</button>
    </div>

    <div class="row d-flex justify-content-between">
        <div class="col-md-4">
            <div class="card" id="todo-card">
                <div class="card-body mx-2 my-2">
                    <h4 class="card-title">@T.ToDoColumnLabel</h4>
                    <ul class="list-group task-list" id="todo" ondrop="drop(event)" ondragover="allowDrop(event)">
                        @foreach (var task in Model.TasksByColumn.GetValueOrDefault(1, new List<TaskVM>()))
                        {
                            <li id="task-@task.Id" class="list-group-item draggable d-flex align-items-center"
                                draggable="true" ondragstart="drag(event)" onclick="openTaskModal(this)">
                                @task.Title
                                <button class="btn btn-icon bg-transparent text-danger ml-auto"
                                        onclick="removeTask(this); event.stopPropagation();">
                                    <i class="remove ti-close"></i>
                                </button>
                            </li>
                        }
                    </ul>
                    <div class="input-group mt-3">
                        <input type="text" id="newTaskTodo" class="form-control" placeholder="@T.AddNewTaskInputLabel">
                        <button class="btn btn-icon bg-transparent text-primary" onclick="addTask('todo')">
                            <i class="icon-circle-plus"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card" id="doing-card">
                <div class="card-body mx-2 my-2">
                    <h4 class="card-title">@T.DoingColumnLabel</h4>
                    <ul class="list-group task-list" id="doing" ondrop="drop(event)" ondragover="allowDrop(event)">
                        @foreach (var task in Model.TasksByColumn.GetValueOrDefault(2, new List<TaskVM>()))
                        {
                            <li id="task-@task.Id" class="list-group-item draggable d-flex align-items-center"
                                draggable="true" ondragstart="drag(event)" onclick="openTaskModal(this)">
                                @task.Title
                                <button class="btn btn-icon bg-transparent text-danger ml-auto"
                                        onclick="removeTask(this); event.stopPropagation();">
                                    <i class="remove ti-close"></i>
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card" id="done-card">
                <div class="card-body mx-2 my-2">
                    <h4 class="card-title">@T.DoneColumnLabel</h4>
                    <ul class="list-group task-list" id="done" ondrop="drop(event)" ondragover="allowDrop(event)">
                        @foreach (var task in Model.TasksByColumn.GetValueOrDefault(3, new List<TaskVM>()))
                        {
                            <li id="task-@task.Id" class="list-group-item draggable d-flex align-items-center"
                                draggable="true" ondragstart="drag(event)" onclick="openTaskModal(this)">
                                @task.Title
                                <button class="btn btn-icon bg-transparent text-danger ml-auto"
                                        onclick="removeTask(this); event.stopPropagation();">
                                    <i class="remove ti-close"></i>
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
    @await Html.PartialAsync("_EditTaskModal", new TaskUpdateVM())
</div>

<script>
    // Open modal window for editing
    async function openTaskModal(element) {
        let taskId = element.id.split("-")[1];

        // Fetch task details from the server
        try {
            let response = await fetch(`/kanban/task/${taskId}`);
            if (response.ok) {
                let task = await response.json();

                // Populate the modal form
                document.getElementById("title").value = task.title;
                document.getElementById("description").value = task.description;
                
                //let startDate = new Date(task.startDate).toISOString().slice(0, 10);
                //document.getElementById("start-date").value = startDate;

                //let dueDate = new Date(task.dueDate).toISOString().slice(0, 10);
                //document.getElementById("due-date").value = dueDate;
                
                document.getElementById("taskDetails").innerText = `Editing Task: ${task.title}`;

                // Set the hidden task ID field
                document.querySelector("input[name='Id']").value = task.id;

                // Show the modal
                $("#taskModal").modal("show");
            } else {
                console.error('Failed to fetch task details');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }
    
    // Allow dropping
    function allowDrop(ev) {
        ev.preventDefault();
    }

    // Start dragging
    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    // Handle drop
    async function drop(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("text");
        var taskId = data.split("-")[1];
        var targetColumn = ev.target.closest(".task-list");

        if (!targetColumn) {
            console.error("Could not find the target column.");
            return;
        }

        var targetColumnId = targetColumn.id;
        var currentColumnId = document.getElementById(data).closest(".task-list").id;

        // Get all tasks in the target column
        var tasks = Array.from(targetColumn.querySelectorAll(".draggable"));
        console.log("Tasks in Target Column:", tasks);

        // Calculate the position index
        var position = tasks.length; // Default to the end of the list
        var dropTarget = ev.target.closest(".draggable");

        if (dropTarget) {
            // Find the index of the drop target
            position = tasks.indexOf(dropTarget);

            // Check if the task is dropped below the drop target
            var dropTargetRect = dropTarget.getBoundingClientRect();
            console.log("Drop Target Rect:", dropTargetRect);
            console.log("Mouse Y:", ev.clientY);

            if (ev.clientY > dropTargetRect.top + dropTargetRect.height / 2) {
                position++;
            }
            console.log("Adjusted Position:", position);
        } else {
            // If no drop target is found, append the task to the end
            console.log("Appending to End. Position:", position);
        }

        // Send the move request to the server
        try {
            let response = await fetch('/kanban/move', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    id: taskId,
                    columnId: getColumnIdFromColumnName(targetColumnId),
                    position: position
                })
            });

            if (response.ok) {
                var taskElement = document.getElementById(data);
                targetColumn.insertBefore(taskElement, tasks[position] || null);
            } else {
                console.error('Failed to move task');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    // Add a new task
    async function addTask(columnId) {
        let input = document.getElementById("newTask" + columnId.charAt(0).toUpperCase() + columnId.slice(1));
        let taskText = input.value.trim();
        if (taskText === "") return;

        try {
            let response = await fetch('/kanban/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    projectId: @Model.ProjectId,
                    title: taskText,
                    columnId: getColumnIdFromColumnName(columnId)
                })
            });

            if (response.ok) {
                let newTask = await response.json();
                
                let taskList = document.getElementById(columnId);
                let taskItem = document.createElement('li');
                taskItem.id = `task-${newTask.id}`;
                taskItem.className = 'list-group-item draggable d-flex align-items-center';
                taskItem.draggable = true;
                taskItem.ondragstart = drag;
                taskItem.onclick = function () {
                    openTaskModal(this);
                };
                taskItem.innerHTML = `
                ${newTask.title}
                <button class="btn btn-icon bg-transparent text-danger ml-auto" onclick="removeTask(this); event.stopPropagation();">
                    <i class="remove ti-close"></i>
                </button>`;
                taskList.appendChild(taskItem);
                input.value = '';
            } else {
                console.error('Failed to add task');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    // Remove a task
    async function removeTask(button) {
        let taskItem = button.parentElement;
        let taskId = taskItem.id.split("-")[1];

        try {
            let response = await fetch('/kanban/delete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    id: taskId
                })
            });

            if (response.ok) {
                taskItem.remove();
            } else {
                console.error('Failed to delete task');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    // Map column names to IDs
    function getColumnIdFromColumnName(columnName) {
        switch (columnName) {
            case 'todo':
                return 1;
            case 'doing':
                return 2;
            case 'done':
                return 3;
            default:
                return 0;
        }
    }

</script>

<style>
    .task-list {
        min-height: 200px;
        border: 1px dashed #ccc;
        padding: 10px;
        background-color: #f8f9fa;
    }

    .draggable {
        cursor: grab;
        margin: 5px;
    }
    
    #todo-card {
        border: 2px solid #f67268;
    }
    #doing-card {
        border: 2px solid #58b0f6;
    }
    #done-card {
        border: 2px solid #4cb050;
    }
</style>