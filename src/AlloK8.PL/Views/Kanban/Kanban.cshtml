@model Dictionary<int, List<TaskVM>>

@{
    Layout = "_Layout";
}

<div class="content-wrapper">
    <h3 class="mb-4">[Project] Kanban Board</h3>

    <div class="row d-flex justify-content-between">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">To Do</h4>
                    <ul class="list-group task-list" id="todo" ondrop="drop(event)" ondragover="allowDrop(event)">
                        @foreach (var task in Model.GetValueOrDefault(1, new List<TaskVM>()))
                        {
                        <li id="task-@task.Id" class="list-group-item draggable d-flex align-items-center" draggable="true" ondragstart="drag(event)">
                            @task.Title
                            <button class="btn btn-icon bg-transparent text-danger ml-auto" onclick='removeTask(this)'>
                                <i class="remove ti-close"></i>
                            </button>
                        </li>
                        }
                    </ul>
                    <div class="input-group mt-3">
                        <input type="text" id="newTaskTodo" class="form-control" placeholder="Add new task">
                        <button class="btn btn-icon bg-transparent text-primary" onclick="addTask('todo')">
                            <i class="icon-circle-plus"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Doing</h4>
                    <ul class="list-group task-list" id="doing" ondrop="drop(event)" ondragover="allowDrop(event)">
                        @foreach (var task in Model.GetValueOrDefault(2, new List<TaskVM>()))
                        {
                        <li id="task-@task.Id" class="list-group-item draggable d-flex align-items-center" draggable="true" ondragstart="drag(event)">
                            @task.Title
                            <button class="btn btn-icon bg-transparent text-danger ml-auto" onclick='removeTask(this)'>
                                <i class="remove ti-close"></i>
                            </button>
                        </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Done</h4>
                    <ul class="list-group task-list" id="done" ondrop="drop(event)" ondragover="allowDrop(event)">
                        @foreach (var task in Model.GetValueOrDefault(3, new List<TaskVM>()))
                        {
                        <li id="task-@task.Id" class="list-group-item draggable d-flex align-items-center" draggable="true" ondragstart="drag(event)">
                            @task.Title
                            <button class="btn btn-icon bg-transparent text-danger ml-auto" onclick='removeTask(this)'>
                                <i class="remove ti-close"></i>
                            </button>
                        </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Allow dropping
    function allowDrop(ev) {
        ev.preventDefault();
    }

    // Start dragging
    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    // Handle drop
    function drop(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("text");
        var taskId = data.split("-")[1];
        var targetColumn = ev.target.closest(".task-list");

        if (!targetColumn) {
            console.error("Could not find the target column.");
            return;
        }

        var targetColumnId = targetColumn.id;
        var currentColumnId = document.getElementById(data).closest(".task-list").id;

        // Get all tasks in the target column
        var tasks = Array.from(targetColumn.querySelectorAll(".draggable"));
        console.log("Tasks in Target Column:", tasks);

        // Calculate the position index
        var position = tasks.length; // Default to the end of the list
        var dropTarget = ev.target.closest(".draggable");

        if (dropTarget) {
            // Find the index of the drop target
            position = tasks.indexOf(dropTarget);

            // Check if the task is dropped below the drop target
            var dropTargetRect = dropTarget.getBoundingClientRect();
            console.log("Drop Target Rect:", dropTargetRect);
            console.log("Mouse Y:", ev.clientY);

            if (ev.clientY > dropTargetRect.top + dropTargetRect.height / 2) {
                position++;
            }
            console.log("Adjusted Position:", position);
        } else {
            // If no drop target is found, append the task to the end
            console.log("Appending to End. Position:", position);
        }

        // Create and submit the form
        var form = document.createElement("form");
        form.method = "POST";
        form.action = "/kanban/move";

        var taskIdInput = document.createElement("input");
        taskIdInput.type = "hidden";
        taskIdInput.name = "id";
        taskIdInput.value = taskId;
        form.appendChild(taskIdInput);

        var columnIdInput = document.createElement("input");
        columnIdInput.type = "hidden";
        columnIdInput.name = "columnId";
        columnIdInput.value = getColumnIdFromColumnName(targetColumnId);
        form.appendChild(columnIdInput);

        var positionInput = document.createElement("input");
        positionInput.type = "hidden";
        positionInput.name = "position";
        positionInput.value = position;
        form.appendChild(positionInput);

        document.body.appendChild(form);
        form.submit();
    }

    // Add a new task
    function addTask(columnId) {
        let input = document.getElementById("newTask" + columnId.charAt(0).toUpperCase() + columnId.slice(1));
        let taskText = input.value.trim();
        if (taskText === "") return;

        var form = document.createElement("form");
        form.method = "POST";
        form.action = "/kanban/create";

        var titleInput = document.createElement("input");
        titleInput.type = "hidden";
        titleInput.name = "title";
        titleInput.value = taskText;
        form.appendChild(titleInput);

        document.body.appendChild(form);
        form.submit();
    }

    // Remove a task
    function removeTask(button) {
        let taskItem = button.parentElement;
        let taskId = taskItem.id.split("-")[1];

        var form = document.createElement("form");
        form.method = "POST";
        form.action = "/kanban/delete";

        var taskIdInput = document.createElement("input");
        taskIdInput.type = "hidden";
        taskIdInput.name = "id";
        taskIdInput.value = taskId;
        form.appendChild(taskIdInput);

        document.body.appendChild(form);
        form.submit();
    }

    // Map column names to IDs
    function getColumnIdFromColumnName(columnName) {
        switch (columnName) {
            case 'todo':
                return 1;
            case 'doing':
                return 2;
            case 'done':
                return 3;
            default:
                return 0;
        }
    }
</script>

<style>
    .task-list {
        min-height: 200px;
        border: 1px dashed #ccc;
        padding: 10px;
        background-color: #f8f9fa;
    }

    .draggable {
        cursor: grab;
        margin: 5px;
    }
</style>