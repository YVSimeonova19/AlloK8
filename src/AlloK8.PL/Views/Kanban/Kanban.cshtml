@model KanbanVM

@{
    Layout = "_Layout";
}

<div class="content-wrapper">
    <div class="row d-flex justify-content-between align-items-center">
        <h3 class="mb-4 ml-3">@Model.ProjectName @T.KanbanBoardTitleText</h3>
        <div class="d-flex align-items-center mr-3 mb-4">
            <a class="btn btn-primary mr-3" type="button" id="labelsButton" href="/projects/@Model.ProjectId/labels">
                @T.LabelsViewTitle
            </a>
            <div class="dropdown">
                <button class="btn btn-primary dropdown-toggle" type="button" id="filterDropdownButton"
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @T.FilterDropdownText
                </button>
                <div class="dropdown-menu p-2" aria-labelledby="filterDropdownButton">
                    <div class="d-flex justify-content-between align-items-center px-2 py-1">
                        <span>@T.SortByPriorityButtonText</span>
                        <input type="checkbox" id="priorityCheckbox" onchange="togglePrioritySort(this)">
                    </div>
                    <div class="d-flex justify-content-between align-items-center px-2 py-1">
                        <span>@T.OnlyMineButtonText</span>
                        <input type="checkbox" id="onlyMineCheckbox" onchange="toggleOnlyMine(this)">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row d-flex justify-content-between">
        <div class="col-md-4">
            <div class="card" id="todo-card">
                <div class="card-body mx-2 my-2">
                    <h4 class="card-title">@T.ToDoColumnLabel</h4>
                    <ul class="list-group task-list" id="todo" ondrop="drop(event)" ondragover="allowDrop(event)">
                        @foreach (var task in Model.TasksByColumn.GetValueOrDefault(1, new List<TaskKanbanVM>()))
                        {
                        <li id="task-@task.Id" class="list-group-item draggable d-flex align-items-center @(task.IsPriority ? "priority-task" : "")"
                            draggable="true" ondragstart="drag(event)" onclick="openTaskModal(this)">
                            <p>@task.Title</p>
                            <button class="btn btn-icon bg-transparent text-danger ml-auto"
                                    onclick="removeTask(this); event.stopPropagation();">
                                <i class="remove ti-close"></i>
                            </button>
                        </li>
                        }
                    </ul>
                    <div class="input-group mt-3">
                        <input type="text" id="newTaskTodo" class="form-control" placeholder="@T.AddNewTaskInputLabel">
                        <button class="btn btn-icon bg-transparent text-primary" onclick="addTask('todo')">
                            <i class="icon-circle-plus"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card" id="doing-card">
                <div class="card-body mx-2 my-2">
                    <h4 class="card-title">@T.DoingColumnLabel</h4>
                    <ul class="list-group task-list" id="doing" ondrop="drop(event)" ondragover="allowDrop(event)">
                        @foreach (var task in Model.TasksByColumn.GetValueOrDefault(2, new List<TaskKanbanVM>()))
                        {
                        <li id="task-@task.Id" class="list-group-item draggable d-flex align-items-center @(task.IsPriority ? "priority-task" : "")"
                            draggable="true" ondragstart="drag(event)" onclick="openTaskModal(this)">
                            <p>@task.Title</p>
                            <button class="btn btn-icon bg-transparent text-danger ml-auto"
                                    onclick="removeTask(this); event.stopPropagation();">
                                <i class="remove ti-close"></i>
                            </button>
                        </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card" id="done-card">
                <div class="card-body mx-2 my-2">
                    <h4 class="card-title">@T.DoneColumnLabel</h4>
                    <ul class="list-group task-list" id="done" ondrop="drop(event)" ondragover="allowDrop(event)">
                        @foreach (var task in Model.TasksByColumn.GetValueOrDefault(3, new List<TaskKanbanVM>()))
                        {
                        <li id="task-@task.Id" class="list-group-item draggable d-flex align-items-center @(task.IsPriority ? "priority-task" : "")"
                            draggable="true" ondragstart="drag(event)" onclick="openTaskModal(this)">
                            <p>@task.Title</p>
                            <button class="btn btn-icon bg-transparent text-danger ml-auto"
                                    onclick="removeTask(this); event.stopPropagation();">
                                <i class="remove ti-close"></i>
                            </button>
                        </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
    @await Html.PartialAsync("_EditTaskModal", new TaskUpdateVM())
</div>

<script>
    // Open modal window for editing
    async function openTaskModal(element) {
        let taskId = element.id.split("-")[1];

        try {
            let response = await fetch(`/kanban/task/${taskId}`);
            if (response.ok) {
                let task = await response.json();

                // Get modal elements
                const titleInput = document.getElementById("title");
                const descriptionInput = document.getElementById("description");
                const startDateInput = document.getElementById("start-date");
                const dueDateInput = document.getElementById("due-date");
                const modalTitleElement = document.getElementById("modal-title");
                const isPriorityCheckbox = document.getElementById("is-priority");
                const taskIdInput = document.querySelector("input[name='Id']");

                // Safely set values with null checks
                if (titleInput) titleInput.value = task.title || '';
                if (descriptionInput) descriptionInput.value = task.description || '';

                // Handle date inputs with more robust parsing
                if (startDateInput && task.startDate) {
                    try {
                        // Convert to local date input format (YYYY-MM-DD)
                        let startDate = new Date(task.startDate);
                        startDateInput.value = startDate.toISOString().slice(0, 10);
                    } catch (dateError) {
                        console.warn('Error parsing start date:', dateError);
                        startDateInput.value = '';
                    }
                }

                if (dueDateInput && task.dueDate) {
                    try {
                        // Convert to local date input format (YYYY-MM-DD)
                        let dueDate = new Date(task.dueDate);
                        dueDateInput.value = dueDate.toISOString().slice(0, 10);
                    } catch (dateError) {
                        console.warn('Error parsing due date:', dateError);
                        dueDateInput.value = '';
                    }
                }

                if (modalTitleElement) modalTitleElement.innerText = task.title || 'Edit Task';

                if (isPriorityCheckbox) isPriorityCheckbox.checked = task.isPriority || false;

                if (taskIdInput) taskIdInput.value = task.id || '';

                // Show the modal
                const taskModal = $('#taskModal');
                if (taskModal.length) {
                    taskModal.modal("show");
                }
            } else {
                console.error('Failed to fetch task details');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    // Modify the addTask function to better handle new task creation
    async function addTask(columnId) {
        let input = document.getElementById("newTask" + columnId.charAt(0).toUpperCase() + columnId.slice(1));
        let taskText = input.value.trim();
        if (taskText === "") return;

        try {
            let response = await fetch('/kanban/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    projectId: @Model.ProjectId,
                    title: taskText,
                    columnId: getColumnIdFromColumnName(columnId)
                })
            });

            if (response.ok) {
                let newTask = await response.json();

                let taskList = document.getElementById(columnId);
                let taskItem = document.createElement('li');
                taskItem.id = `task-${newTask.id}`;
                taskItem.className = 'list-group-item draggable d-flex align-items-center';
                taskItem.draggable = true;
                taskItem.ondragstart = drag;
                taskItem.onclick = function () {
                    openTaskModal(this);
                };
                taskItem.innerHTML = `
            <p>${newTask.title}</p>
            <button class="btn btn-icon bg-transparent text-danger ml-auto" onclick="removeTask(this); event.stopPropagation();">
                <i class="remove ti-close"></i>
            </button>`;
                taskList.appendChild(taskItem);
                input.value = '';

                // Show visual feedback
                taskItem.classList.add("task-added");
                setTimeout(() => {
                    taskItem.classList.remove("task-added");
                }, 1000);

                // Optional: Pre-populate the modal with new task details
                setTimeout(() => {
                    const newTaskElement = document.getElementById(`task-${newTask.id}`);
                    if (newTaskElement) {
                        // Prepare modal with minimal details
                        const titleInput = document.getElementById("title");
                        const taskIdInput = document.querySelector("input[name='Id']");
                        const modalTitleElement = document.getElementById("modal-title");

                        if (titleInput) titleInput.value = newTask.title;
                        if (taskIdInput) taskIdInput.value = newTask.id;
                        if (modalTitleElement) modalTitleElement.innerText = newTask.title;

                        // Show the modal
                        $('#taskModal').modal("show");
                    }
                }, 100);  // Small delay to ensure DOM is updated
            } else {
                console.error('Failed to add task');
                showNotification("error", "Failed to add task");
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification("error", "Error adding task");
        }
    }

    // Allow dropping
    function allowDrop(ev) {
        ev.preventDefault();
    }

    // Start dragging
    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    // Handle drop
    async function drop(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("text");
        var taskId = data.split("-")[1];
        var targetColumn = ev.target.closest(".task-list");

        if (!targetColumn) {
            console.error("Could not find the target column.");
            return;
        }

        var targetColumnId = targetColumn.id;
        var currentColumnId = document.getElementById(data).closest(".task-list").id;

        // Get all tasks in the target column
        var tasks = Array.from(targetColumn.querySelectorAll(".draggable"));
        console.log("Tasks in Target Column:", tasks);

        // Calculate the position index
        var position = tasks.length; // Default to the end of the list
        var dropTarget = ev.target.closest(".draggable");

        if (dropTarget) {
            // Find the index of the drop target
            position = tasks.indexOf(dropTarget);

            // Check if the task is dropped below the drop target
            var dropTargetRect = dropTarget.getBoundingClientRect();
            console.log("Drop Target Rect:", dropTargetRect);
            console.log("Mouse Y:", ev.clientY);

            if (ev.clientY > dropTargetRect.top + dropTargetRect.height / 2) {
                position++;
            }
            console.log("Adjusted Position:", position);
        } else {
            // If no drop target is found, append the task to the end
            console.log("Appending to End. Position:", position);
        }

        // Send the move request to the server
        try {
            let response = await fetch('/kanban/move', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    id: taskId,
                    columnId: getColumnIdFromColumnName(targetColumnId),
                    position: position
                })
            });

            if (response.ok) {
                var taskElement = document.getElementById(data);
                targetColumn.insertBefore(taskElement, tasks[position] || null);
                // Show a subtle success indicator
                taskElement.classList.add("move-success");
                setTimeout(() => {
                    taskElement.classList.remove("move-success");
                }, 1000);
            } else {
                console.error('Failed to move task');
                showNotification("error", "Failed to move task");
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification("error", "Error moving task");
        }
    }

    // Remove a task
    async function removeTask(button) {
        if (!confirm("@Html.Raw(@T.DeleteTaskSureModalText)")) {
            return;
        }

        let taskItem = button.parentElement;
        let taskId = taskItem.id.split("-")[1];

        try {
            let response = await fetch('/kanban/delete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    id: taskId
                })
            });

            if (response.ok) {
                // Fade out the task before removing
                taskItem.style.transition = "opacity 0.3s";
                taskItem.style.opacity = "0";

                setTimeout(() => {
                    taskItem.remove();
                }, 300);
            } else {
                console.error('Failed to delete task');
                showNotification("error", "Failed to delete task");
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification("error", "Error deleting task: " + error.message);
        }
    }

    // Map column names to IDs
    function getColumnIdFromColumnName(columnName) {
        switch (columnName) {
            case 'todo':
                return 1;
            case 'doing':
                return 2;
            case 'done':
                return 3;
            default:
                return 0;
        }
    }

    // Toggle priority sorting
    function togglePrioritySort(checkbox) {
        const sortByPriority = checkbox.checked;
        const projectId = @Model.ProjectId;

        // Get the current URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        // Preserve the onlyMine parameter if it exists
        const onlyMine = urlParams.get('onlyMine');

        let url = `/projects/${projectId}/kanban?sortByPriority=${sortByPriority}`;
        if (onlyMine) {
            url += `&onlyMine=${onlyMine}`;
        }

        // Reload the page with the new parameters
        window.location.href = url;
    }

    // Toggle only mine filter
    function toggleOnlyMine(checkbox) {
        const onlyMine = checkbox.checked;
        const projectId = @Model.ProjectId;

        // Get the current URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        // Preserve the priority sort parameter if it exists
        const sortByPriority = urlParams.get('sortByPriority');

        let url = `/projects/${projectId}/kanban?onlyMine=${onlyMine}`;
        if (sortByPriority) {
            url += `&sortByPriority=${sortByPriority}`;
        }

        // Reload the page with the new filtering parameter
        window.location.href = url;
    }

    // Initialize the toggle state based on the query parameter
    document.addEventListener("DOMContentLoaded", function () {
        const urlParams = new URLSearchParams(window.location.search);
        const sortByPriority = urlParams.get('sortByPriority') === 'true';
        const onlyMine = urlParams.get('onlyMine') === 'true';

        document.getElementById('priorityCheckbox').checked = sortByPriority;
        document.getElementById('onlyMineCheckbox').checked = onlyMine;

        // Enable or disable drag-and-drop based on the toggle state
        if (sortByPriority) {
            disableDragAndDrop();
        } else {
            enableDragAndDrop();
        }

        // Add event listeners for task input fields to support pressing Enter
        const todoInput = document.getElementById("newTaskTodo");
        if (todoInput) {
            todoInput.addEventListener("keypress", function (e) {
                if (e.key === "Enter") {
                    e.preventDefault();
                    addTask("todo");
                }
            });
        }
    });

    // Disable drag-and-drop functionality
    function disableDragAndDrop() {
        const draggableTasks = document.querySelectorAll('.draggable');
        draggableTasks.forEach(task => {
            task.draggable = false;
            task.removeAttribute('ondragstart');
            task.style.cursor = 'default';
        });

        const taskLists = document.querySelectorAll('.task-list');
        taskLists.forEach(list => {
            list.removeAttribute('ondrop');
            list.removeAttribute('ondragover');
        });
    }

    // Enable drag-and-drop functionality
    function enableDragAndDrop() {
        const draggableTasks = document.querySelectorAll('.draggable');
        draggableTasks.forEach(task => {
            task.draggable = true;
            task.setAttribute('ondragstart', 'drag(event)');
            task.style.cursor = 'grab';
        });

        const taskLists = document.querySelectorAll('.task-list');
        taskLists.forEach(list => {
            list.setAttribute('ondrop', 'drop(event)');
            list.setAttribute('ondragover', 'allowDrop(event)');
        });
    }

    // Show notification
    function showNotification(type, message) {
        const notificationEl = document.createElement("div");
        notificationEl.className = `alert alert-${type === "error" ? "danger" : "success"} notification`;
        notificationEl.textContent = message;
        document.body.appendChild(notificationEl);

        setTimeout(() => {
            notificationEl.style.opacity = "0";
            setTimeout(() => {
                notificationEl.remove();
            }, 300);
        }, 3000);
    }
</script>

<style>
    .task-list {
        min-height: 200px;
        border: 1px dashed #ccc;
        padding: 10px;
        background-color: #f8f9fa;
    }

    .draggable {
        cursor: grab;
        margin: 5px;
    }

    .list-group-item {
        border: 1px solid rgba(0, 0, 0, 0.125) !important;
    }

    .list-group-item.priority-task {
        border-left: 4px solid #4B49AC !important;
    }

    #todo-card {
        border: 2px solid #f67268;
    }
    #doing-card {
        border: 2px solid #58b0f6;
    }
    #done-card {
        border: 2px solid #4cb050;
    }

    /* Animation for task movement success */
    .move-success {
        background-color: rgba(75, 192, 192, 0.2);
        transition: background-color 0.5s;
    }

    /* Animation for task addition */
    .task-added {
        opacity: 0;
        animation: taskFadeIn 0.5s forwards;
    }

    @@-webkit-keyframes taskFadeIn {
         from { opacity: 0; }
         to { opacity: 1; }
     }

    @@keyframes taskFadeIn {
         from { opacity: 0; }
         to { opacity: 1; }
     }

    /* Notification styling */
    .notification {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1050;
        min-width: 250px;
        padding: 15px;
        border-radius: 4px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: opacity 0.3s;
    }
</style>