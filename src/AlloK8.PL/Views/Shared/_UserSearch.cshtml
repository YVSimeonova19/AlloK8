@model List<AlloK8.DAL.Models.UserProfile>

<div class="user-search-bar">
    <label for="userSearchInput">search users</label>
    <input
        type="text"
        id="userSearchInput"
        class="form-control"
        placeholder="Search for users..."
        autocomplete="off"/>

    <div id="userDropdown" class="dropdown-menu" style="display: none; max-height: 150px; overflow-y: auto;"></div>

    <div id="selectedUsers" class="mt-2"></div>
</div>
    
<template id="selectedUserTemplate">
    <div class="selected-user">
        <span class="user-name"></span>
        <button class="remove-user-btn">×</button>
    </div>
</template>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("userSearchInput");
        const dropdown = document.getElementById("userDropdown");
        const selectedUsersContainer = document.getElementById("selectedUsers");
        const selectedUserTemplate = document.getElementById("selectedUserTemplate").content;

        // Function to fetch users from the backend
        async function fetchUsersByEmail(email) {
            try {
                const response = await fetch(`/api/users/search?email=${encodeURIComponent(email)}`);
                if (!response.ok) throw new Error("Failed to fetch users");
                return await response.json();
            } catch (error) {
                console.error(error);
                return [];
            }
        }

        // Display filtered users in the dropdown
        async function showDropdown(searchTerm) {
            if (searchTerm) {
                const users = await fetchUsersByEmail(searchTerm);
                dropdown.innerHTML = ""; // Clear previous results
                if (users.length > 0) {
                    users.forEach((user) => {
                        const item = document.createElement("div");
                        item.className = "dropdown-item";
                        item.textContent = user.ApplicationUser?.Email || "No email"; // Display email
                        item.addEventListener("click", () => selectUser(user));
                        dropdown.appendChild(item);
                    });
                    dropdown.style.display = "block";
                } else {
                    dropdown.style.display = "none";
                }
            } else {
                dropdown.style.display = "none";
            }
        }

        // Handle user selection
        function selectUser(user) {
            if (!document.querySelector(`.selected-user[data-id="${user.Id}"]`)) {
                const clone = document.importNode(selectedUserTemplate, true);
                clone.querySelector(".user-name").textContent = user.ApplicationUser?.Email || "No email";
                clone.querySelector(".remove-user-btn").addEventListener("click", () =>
                    removeUser(user.Id)
                );
                const selectedUserDiv = clone.querySelector(".selected-user");
                selectedUserDiv.setAttribute("data-id", user.Id);
                selectedUsersContainer.appendChild(clone);

                // Add a hidden input for the selected user
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'SelectedUserIds';
                hiddenInput.value = user.Id;
                selectedUsersContainer.appendChild(hiddenInput);
            }
            searchInput.value = ""; // Clear search input
            dropdown.style.display = "none"; // Hide dropdown
        }

        // Handle user removal
        function removeUser(userId) {
            const userDiv = document.querySelector(`.selected-user[data-id="${userId}"]`);
            if (userDiv) {
                userDiv.remove();
            }
            const hiddenInput = document.querySelector(`input[name="SelectedUserIds"][value="${userId}"]`);
            if (hiddenInput) {
                hiddenInput.remove();
            }
        }

        // Event listener for search input
        searchInput.addEventListener("input", function () {
            const searchTerm = this.value.trim();
            showDropdown(searchTerm);
        });

        // Hide dropdown when clicking outside
        document.addEventListener("click", function (event) {
            if (!event.target.closest(".user-search-bar")) {
                dropdown.style.display = "none";
            }
        });
    });
</script>

<style>
    .user-search-bar {
        position: relative;
        width: 100%;
        max-width: 400px;
    }

    .dropdown-menu {
        width: 100%;
        max-height: 150px;
        overflow-y: auto;
        border: 1px solid #ddd;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .dropdown-item {
        padding: 8px 16px;
        cursor: pointer;
    }

    .dropdown-item:hover {
        background-color: #f8f9fa;
    }

    #selectedUsers {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }

    .selected-user {
        display: flex;
        align-items: center;
        background-color: #e9ecef;
        padding: 4px 8px;
        border-radius: 16px;
    }

    .selected-user .user-name {
        margin-right: 8px;
    }

    .selected-user .remove-user-btn {
        background: none;
        border: none;
        color: #dc3545;
        cursor: pointer;
    }

    .selected-user .remove-user-btn:hover {
        color: #c82333;
    }
</style>